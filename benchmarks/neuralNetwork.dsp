declare name    "DNN";
declare author  "JOS";
declare license "STK-4.3";

import("stdfaust.lib");

input = 0.004;
weights_conv = (-0.02043011784553528, 0, 0.24742978811264038, 0, 0.22214144468307495, 0, 0.09443283081054688, 0, -0.29174819588661194, 0, -0.18583859503269196, 0, 0.35624784231185913, 0, 0.24480324983596802, 0, 0.14443576335906982, 0, -0.014237433671951294, 0, -0.2837878465652466, 0, 0.22863107919692993, 0, 0.05779203772544861, 0, -0.36591240763664246, 0, -0.20597563683986664, 0, 0.02311420440673828, 0, 0.0779276192188263, 0, -0.3129701018333435, 0, -0.039124369621276855, 0, -0.404771625995636, 0, -0.15927907824516296, 0, -0.18174093961715698, 0, 0.13858741521835327, 0, -0.17989704012870789, 0, -0.0029540956020355225, 0, -0.2835344672203064, 0, -0.38665905594825745, 0, 0.23656654357910156, 0, 0.25712865591049194, 0, -0.031503111124038696, 0, 0.10503494739532471, 0, -0.08921301364898682, 0, 0.35303425788879395, 0, 0.11996287107467651, 0, -0.024722158908843994, 0, 0.09770959615707397, 0, -0.07528901100158691, 0, -0.09139895439147949, 0, 0.21160268783569336, 0, 0.19183415174484253, 0, 0.18735557794570923, 0, -0.4006868302822113, 0, 0.10957002639770508, 0, 0.003354310989379883, 0, -0.0048389732837677, 0, -0.3135540187358856, 0, 0.30972570180892944, 0, -0.37744659185409546, 0, 0.28843289613723755, 0, -0.3503624200820923, 0, -0.11541056632995605, 0, -0.08075138926506042, 0, 0.13638007640838623, 0, -0.24022911489009857, 0, 0.22826004028320312, 0, 0.15346133708953857, 0, 0.27362918853759766, 0, -0.13988617062568665, 0, 0.3206692337989807, 0, -0.37002068758010864, 0, 0.18049561977386475, 0, -0.19713391363620758, 0, 0.340005099773407, 0, -0.120088130235672, 0, 0.3464048504829407, 0, 0.347001850605011, 0, -0.27640923857688904, 0, 0.3441160321235657, 0, 0.12351417541503906, 0, 0.3447832465171814, 0, 0.05875077843666077, 0, 0.16337662935256958, 0, -0.32207491993904114, 0, 0.2447817325592041, 0, 0.14536213874816895, 0, -0.35184451937675476, 0, -0.08403056859970093, 0, 0.33901095390319824, 0, -0.34240615367889404, 0, 0.11399054527282715, 0, -0.16734251379966736, 0, 0.23315703868865967, 0, -0.30505579710006714, 0, -0.03802245855331421, 0, -0.31455355882644653, 0, 0.13555258512496948, 0, 0.19008195400238037, 0, 0.3582879304885864, 0, -0.13651198148727417, 0, 0.14953583478927612, 0, 0.00682029128074646, 0, 0.20766234397888184, 0, -0.3769071400165558, 0, 0.04430866241455078, 0, 0.06170573830604553, 0, 0.35398030281066895, 0);
b_conv = (0.06687769293785095, 0.09896042943000793, -0.06919427216053009, -0.09067609161138535);
w_first = (0.040848951786756516, 0.009470826014876366, 0.04745715856552124, 0.08986492455005646, -0.0016478345496580005, 0.04925836622714996, -0.02410576306283474, -0.09796124696731567);
w_second = (-0.6005218029022217, -0.048631977289915085, -0.1951351910829544, 0.2758840322494507, -0.10551896691322327, -0.2377803921699524, 0.6258103847503662, 0.25200507044792175, -0.38236796855926514, 0.3128879964351654, 0.36760571599006653, 0.10309645533561707, 0.4574204683303833, -0.39208391308784485, -0.4391361474990845, 0.23308612406253815, -0.18268893659114838, 0.23565441370010376, -0.6322327256202698, 0.15735161304473877, -0.06710954755544662, -0.25931239128112793, -0.30486375093460083, -0.5673845410346985, -0.16807574033737183, -0.3228686451911926, 0.4403667747974396, 0.041089728474617004, 0.29958564043045044, -0.036139264702796936, 0.2583348751068115, -0.717008113861084);
w_last = (-0.017203450202941895, 0.17267830669879913, 0.13115590810775757, 0.20857281982898712, 0.3370583951473236, -0.15350164473056793, -0.8538827896118164, 0.2071109116077423);
b_first = (0.02338050864636898, -0.08835149556398392, -0.01659432053565979, 0.0037179216742515564, 0.09575460106134415, -0.018192723393440247, 0.030314559116959572, 0.04037496820092201);
b_second = (-0.014781002886593342, -0.017272932454943657, -0.012437989935278893, -0.07062597572803497, -0.020176712423563004, 0.0664997324347496, -0.13445879518985748, 0.0679418221116066);
b_last = -0.0016857999144122005;

Uz = (0.10695385932922363, -0.1456226110458374, 0.14210432767868042, 0.12051576375961304, 0.029554540291428566, -0.2834736704826355, -0.1329338401556015, -0.4210032522678375, -0.21576116979122162, 0.19196125864982605, -0.21425138413906097, -0.11627469211816788, -0.1451728641986847, -0.08448575437068939, -0.18759679794311523, -0.28347083926200867, -0.17417897284030914, -0.2746310532093048, 0.03448101878166199, -0.04036117345094681, -0.07561112195253372, 0.24118615686893463, 0.32456251978874207, -0.19630184769630432, 0.2543959319591522, 0.40284162759780884, 0.17029349505901337, -0.09368174523115158, -0.007351879961788654, -0.02806852012872696, 0.12358344346284866, -0.17876407504081726, -0.049753136932849884, -0.10555537045001984, -0.37959036231040955, -0.011088063940405846, 0.16759493947029114, -0.1012011393904686, -0.18010517954826355, 0.0941169410943985, 0.15759660303592682, 0.2842923104763031, 0.020130207762122154, 0.14572714269161224, 0.10202650725841522, 0.14991602301597595, -0.2772730588912964, -0.31158798933029175, -0.3709772527217865, 0.09511767327785492, 0.09452135115861893, -0.1730182021856308, -0.16487281024456024, 0.2601734399795532, -0.14485716819763184, 0.12737341225147247, 0.06785950064659119, -0.0831945613026619, 0.1593339443206787, -0.33172181248664856, 0.41109710931777954, 0.21714214980602264, 0.16589026153087616, -0.06219441443681717);
Uh = (-0.1286378800868988, 0.3401396572589874, -0.35234835743904114, -0.05959562212228775, -0.29692256450653076, -0.2845357060432434, 0.1347879022359848, 0.07234650105237961, -0.4755934178829193, 0.025729037821292877, 0.055390406399965286, 0.07782362401485443, -0.16421566903591156, 0.11035412549972534, 0.17502769827842712, -0.18602974712848663, 0.22988229990005493, -0.24923090636730194, -0.008622473105788231, -0.1021227017045021, -0.03538148105144501, -0.18941166996955872, 0.17889747023582458, 0.2787780165672302, -0.1504189372062683, -0.17774704098701477, 0.30419421195983887, -0.48697638511657715, -0.32894983887672424, -0.008048664778470993, -0.28504231572151184, 0.13377954065799713, 0.007975367829203606, 0.3832496404647827, 0.40289291739463806, -0.15743692219257355, 0.018281955271959305, -0.3210722804069519, 0.060456376522779465, 0.021378103643655777, -0.06178335100412369, 0.06496766209602356, -0.3138047158718109, -0.3825376629829407, 0.16576246917247772, 0.037332601845264435, 0.3287273943424225, -0.23726783692836761, 0.1174827292561531, 0.180483877658844, -0.2697872519493103, -0.21738924086093903, -0.031764525920152664, 0.4177820384502411, -0.24967607855796814, -0.04866941645741463, -0.0491071417927742, 0.143477663397789, -0.08537935465574265, 0.17393489181995392, -0.1335533857345581, -0.06773755699396133, -0.04829401522874832, 0.3836231231689453);
Ur = (0.3418043851852417, 0.08134770393371582, -0.013150420039892197, -0.4034786820411682, -0.037974268198013306, 0.07972870022058487, -0.01833401434123516, 0.1726027876138687, -0.12772910296916962, 0.34027016162872314, 0.2750701904296875, 0.24821370840072632, 0.19794975221157074, 0.3628038763999939, 0.08192695677280426, 0.23856180906295776, 0.029928144067525864, -0.02339135855436325, -0.09421458095312119, 0.1664472222328186, 0.14967697858810425, 0.06693107634782791, 0.03773026168346405, 0.16137009859085083, -0.3652174174785614, -0.04260594770312309, 0.08561185002326965, -0.1073249951004982, 0.44339028000831604, -0.2054968923330307, -0.2145913541316986, 0.1635131984949112, -0.11253781616687775, -0.08572917431592941, 0.19593587517738342, 0.022590456530451775, -0.06992587447166443, -0.10052202641963959, 0.1592719852924347, -0.20368102192878723, 0.15197350084781647, 0.026501715183258057, 0.11665905267000198, 0.02788309007883072, -0.35317596793174744, 0.05027702450752258, 0.2697567641735077, 0.06233198568224907, -0.18476854264736176, 0.21827955543994904, -0.10406247526407242, -0.12918804585933685, 0.2514551281929016, -0.20791414380073547, 0.34652844071388245, 0.1192236840724945, 0.04223321005702019, -0.038968633860349655, -0.09659259021282196, 0.11311523616313934, -0.11779472231864929, 0.22966226935386658, 0.23982985317707062, 0.0711541399359703);
Wz = (0.43078315258026123, 0.2974473834037781, -0.17177408933639526, 0.20698517560958862, 0.290818452835083, 0.16404801607131958, 0.22970229387283325, -0.05111607909202576, -0.29414278268814087, -0.0246354341506958, -0.26993072032928467, 0.13971388339996338, -0.22802792489528656, 0.24463826417922974, -0.07938829064369202, 0.38045215606689453, -0.34120863676071167, 0.02484908699989319, 0.41209840774536133, -0.28242960572242737, 0.46150773763656616, -0.15926727652549744, 0.2803346514701843, -0.28238457441329956, -0.4480624794960022, -0.3633272647857666, -0.1276150643825531, -0.12469157576560974, -0.278023898601532, 0.44370728731155396, -0.29540979862213135, -0.032058894634246826);
Wr = (0.3234316110610962, -0.3680213689804077, 0.29270845651626587, -0.28378379344940186, -0.38963043689727783, 0.4452992081642151, -0.010031640529632568, 0.2560425400733948, -0.1314885914325714, 0.3627912998199463, 0.11352217197418213, 0.09413027763366699, 0.1221727728843689, -0.0024449527263641357, 0.15919345617294312, 0.01577809453010559, -0.2133713960647583, 0.0034987330436706543, 0.4308208227157593, 0.26971739530563354, 0.21617722511291504, -0.3425072133541107, -0.3209490180015564, 0.4341801404953003, -0.24005234241485596, 0.4603918194770813, 0.29480355978012085, 0.43932288885116577, 0.19954460859298706, 0.40753471851348877, -0.21490360796451569, 0.3847096562385559);
Wh = (0.1599695086479187, 0.24727129936218262, 0.23018258810043335, 0.18389761447906494, -0.15858420729637146, 0.04068601131439209, 0.29297953844070435, 0.1545688509941101, 0.34198492765426636, 0.13594621419906616, 0.20355409383773804, -0.4315193295478821, 0.11842775344848633, -0.2792017161846161, 0.31003034114837646, 0.17092448472976685, 0.2994229197502136, 0.4206228256225586, 0.12444335222244263, -0.16306695342063904, -0.41922616958618164, 0.270601749420166, 0.03163430094718933, 0.17980092763900757, -0.16118907928466797, -0.3598586618900299, -0.2350473403930664, -0.21666085720062256, 0.02578336000442505, -0.3737632930278778, 0.4618607759475708, 0.07815694808959961);
Bz = (0.02829894982278347, -0.013350858353078365, -0.04108823463320732, 0.0344056598842144, -0.07021715492010117, -0.05233653262257576, -0.0680941566824913, -0.021544113755226135, 0.02578912116587162, 0.02058420702815056, 0.056235071271657944, 0.004921737592667341, -0.0007579936645925045, 0.019122855737805367, 0.08714618533849716, -0.024678587913513184);
Br = (0.04471820220351219, -0.00035602334537543356, 0.02894122339785099, -0.023899974301457405, 0.02719028852880001, -0.060605257749557495, -0.03320525214076042, 0.021428704261779785, 0.022693101316690445, -0.05902138352394104, -0.06345945596694946, 0.06542961299419403, -0.1026538833975792, 0.07044011354446411, -0.07011615484952927, 0.027142858132719994);
Bh0 = (0.02680612914264202, 0.021890437230467796, -0.03513230010867119, -0.05370086058974266, -0.11649512499570847, -0.006001502741128206, 0.007153085898607969, 0.09528215229511261);
Bh1 = (-0.0158058013767004, -0.01569822058081627, -0.010588175617158413, 0.07363066077232361, -0.01892106607556343, -0.06204032897949219, 0.02433541603386402, 0.016746658831834793);

// Dense Layer
dense_layer(in_size, out_size, weights, biases, activation) =
  par(i, in_size, _) <: matrix : par(n, out_size, activation)
  with {
    matrix = par(n, out_size, neuron(n));
    neuron(n) = sum(i, in_size, _ * ba.take(i*out_size + n + 1, weights)) + ba.take(n+1, biases);
  };

// Convolutional Layer 
conv_layer(in_size, out_size, kernel_size, dilation, weights, biases, activation) =
  par(i, in_size, _) <:
  par(output_node, out_size, par(input_node, in_size, conv_op(input_node, output_node)) :> _) :
  par(n, out_size, _ + ba.take(n + 1, biases) : activation)
  with {
	delay(i) = @(select2(i==6, i, 0));
    conv_op(x, y) = _ <: par(p, kernel_size, delay(p * dilation) * weight(x, y, p)) :> sum(u, kernel_size, _);
    weight(i, o, p) = ba.take((o * in_size * kernel_size * 2) + (i * kernel_size * 2) + (p * 2) + 1, weights);
  };

// GRU layer
gru(activation) = bus(in_size) <: (loop ~ par(i, out_size, _)) : par(n, out_size, activation)
with {
    out_size = 8; // Number of outputs
    in_size = 4;  // Number of inputs

    // Feedback loop 
    loop(fb, fb2, fb3, fb4, fb5, fb6, fb7, fb8) = main((fb, fb2, fb3, fb4, fb5, fb6, fb7, fb8));

    // Main GRU computation
    main(feedback) = par(n, out_size,
        (1 - zt(n, feedback)) * ht(n, feedback) + zt(n, feedback) * ba.take(n+1, feedback)
    );

    // Update gate (zt) 
    zt(n, prev_output) = sigmoid(
        sum(i, in_size, ba.take(i+1, bus(in_size)) * ba.take(n*in_size + i + 1, Wz)) + // Full input access
        sum(j, out_size, ba.take(j+1, prev_output) * ba.take(n*out_size + j + 1, Uz)) +
        ba.take(n + 1, Bz) + ba.take(n + 1 + out_size, Bz) // Both biases added
    );

    // Reset gate (rt) 
    rt(n, prev_output) = sigmoid(
        sum(i, in_size, ba.take(i+1, bus(in_size)) * ba.take(n*in_size + i + 1, Wr)) + // Full input access
        sum(j, out_size, ba.take(j+1, prev_output) * ba.take(n*out_size + j + 1, Ur)) +
        ba.take(n + 1, Br) + ba.take(n + 1 + out_size, Br) // Both biases added
    );

    // Candidate activation (ht) 
    ht(n, prev_output) = tanh(
        sum(i, in_size, ba.take(i+1, bus(in_size)) * ba.take(n*in_size + i + 1, Wh)) +
        rt(n, prev_output) * (sum(j, out_size, ba.take(j+1, prev_output) * ba.take(n*out_size + j + 1, Uh)) +
        ba.take(n + 1, Bh1)) // Bh1 added here
        + ba.take(n + 1, Bh0) // Bh0 added here
    );

    bus(0) = 0:!;
    bus(1) = _;    // avoids a lot of "bus(1)" labels in block diagrams
    bus(2) = _,_;  // avoids a lot of "bus(2)" labels in block diagrams
    bus(N) = par(i, N, _);

    // Activation Functions
    sigmoid(x) = 1 / (1 + exp(-x));
    tanh(x) = (exp(x) - exp(-x))/(exp(x)+exp(-x));
};
process = _ : dense_layer(1,8,w_first,b_first, tanh) : conv_layer(8,4,3,2, weights_conv, b_conv, tanh) : gru(_) : dense_layer(8, 1, w_last, b_last, _)
with{
  tanh(x) = (exp(x) - exp(-x))/(exp(x)+exp(-x));
  relu(x) = x * (x>0);
};
